labda $endfor
	$startloop
	dup
	jmpz $endloop
	call
	jmp $startloop
	$endloop
	drop
	return
$endfor
set_global %ifor
labda $endwhile
	set_local %ia
	set_local %ib
	$startloop2
	push_word %ia
	jmpz $endloop2
	push_word %ib
	jmp $startloop2
	$endloop2
	return
$endwhile
set_global %iwhile
labda $endcompose
	set_local %ia
	set_local %ib
	labda $endcomposed
		push_word %ib
		push_word %ia
	$endcomposed
	return
$endcompose
set_global %i$
labda $endover3
	set_local %ia
	set_local %ib
	set_local %i$
	get %i$
	get %ib
	get %ia
	get %i$
	return
$endover3
set_global %iover-3
new_dict
set_local %ia
labda $endimport
	set_local %ib
	push_word %ib
	push_word %ia
	has_dict
	push_word %inot
	jmpz $already
		push_word %ib
		push_word %iuse
		push_word %ib
		push_word %ia
		set_dict
	$already
	push_word %ib
	push_word %ia
	get_dict
	push_word %ib
	push_word %isetglobal
	return
$endimport
set_global %iimport
labda $endlist
	new_list
	set_local %ia
	$startloop3
	dup
	jmpz $endloop3
		rot
		get %ia
		push_to
		call
		jmp $startloop3
	$endloop3
	drop
	push_word %ia
	return
$endlist
set_global %ilist
labda $endonce
	push_word %ifalse
	get %ipass
	return
$endonce
set_global %ionce
labda $endwrite
	swap
	set_local %ia
	push_literal %iwrite
	push_literal %iopen
	get %ieva
	get_dict
	call
	set_local %ib
	push_word %ia
	get %ia
	push_word %itype
	push_literal %iblob
	jmpne $isiter
		push_word %ionce
	$isiter
	enter_errhand $write-try
		get %ib
		push_literal %iclose
		get %ieva
		get_dict
		call
		reraise
	$write-try
		$start-write-for
		dup
		jmpz $end-write-for
		set_local %ifor
		set_local %iwhile
			get %ib
			push_literal %iwrite-fragment
			get %ieva
			get_dict
			call
		push_word %iwhile
		push_word %ifor
		jmp $start-write-for
		$end-write-for
		drop
	leave_errhand
	get %ib
	push_literal %iclose
	get %ieva
	get_dict
	call
	return
$endwrite
push_literal %iwrite
get %ieva
set_dict
labda $endreplace
	push_word %isplit
	swap
	push_word %ijoin
	return
$endreplace
set_global %ireplace
labda $endsort
    push_word %ifalse
    push_word %i(sort)
    return
$endsort
set_global %isort
labda $endsort-by
    set_local %ikey
    dup
    push_word %icopy
    dup
    push_word %ilen
    push_word %i--
    set_local %ia
    $start-sort-by-repeat
    push_word %ia
    jmpz $end-sort-by-repeat
        push_word %ia
        over
        get_dict
        push_word %ikey
        dup
        push_word %itype
        push_literal %inum
        jmpeq $no-number
            push_literal 32
            push_literal %itype-error
            push_word %iRaise
        $no-number
        over
        push_word %ia
        swap
        set_dict
    push_word %ia
    push_word %i--
    set_local %ia
    jmp $start-sort-by-repeat
    $end-sort-by-repeat
    push_word %i(sort)
    return
$endsort-by
set_global %isort-by
push_integer 1
push_word %imake-blob
set_local %ispace
push_integer 32
push_integer 0
push_word %ispace
set_dict
push_integer 1
push_word %imake-blob
set_local %inewline
push_integer 10
push_integer 0
push_word %inewline
set_dict
labda $endecho
	push_literal %istdout
	push_literal %iwrite-fragment
	push_word %ieva
	get_dict
	call
	return
$endecho
set_local %iecho
labda $end!print\
	push_word %ito-str
	push_literal %iutf-8
	push_literal %iencode
	push_word %ieva
	get_dict
	call
	push_word %iecho
	return
$end!print\
push_literal %iprint\
push_word %ieva
set_dict
labda $end!print
	push_literal %iprint\
	push_word %ieva
	get_dict
	call
	push_word %inewline
	push_word %iecho
	return
$end!print
push_literal %iprint
push_word %ieva
set_dict
labda $end!print\(
	$startwhile!print\(
	dup
	push_literal %i)
		jmpeq $endwhile!print\(
		push_literal %iprint\
		push_word %ieva
		get_dict
		call
	jmp $startwhile!print\(
	$endwhile!print\(
	drop
	return
$end!print\(
push_literal %iprint\(
push_word %ieva
set_dict
labda $end!print(
	push_literal %iprint\(
	push_word %ieva
	get_dict
	call
	push_word %inewline
	push_word %iecho
	return
$end!print(
push_literal %iprint(
push_word %ieva
set_dict
labda $end!.\
	push_literal %iquoted
	push_literal %iencode
	push_word %ieva
	get_dict
	call
	push_word %iecho
	return
$end!.\
push_literal %i.\
push_word %ieva
set_dict
labda $end!.
	push_literal %i.\
	push_word %ieva
	get_dict
	call
	push_word %inewline
	push_word %iecho
	return
$end!.
push_literal %i.
push_word %ieva
set_dict
labda $end!.\(
	dup
	push_literal %i)
	jmpeq $endwhile!.\(
		$startwhile!.\(
		push_literal %i.\
		push_word %ieva
		get_dict
		call
		dup
		push_literal %i)
		jmpeq $endwhile!.\(
		push_word %ispace
		push_word %iecho
		jmp $startwhile!.\(
	$endwhile!.\(
	drop
	return
$end!.\(
push_literal %i.\(
push_word %ieva
set_dict
labda $end!.(
	push_literal %i.\(
	push_word %ieva
	get_dict
	call
	push_word %inewline
	push_word %iecho
	return
$end!.(
push_literal %i.(
push_word %ieva
set_dict
labda $endmap
	set_local %i$
	push_literal %i]
	swap
	push_word %iin
	$startformap
	dup
	jmpz $endformap
		set_local %ia
		set_local %ib
		push_word %i$
		get %ib
		push_word %ia
	jmp $startformap
	$endformap
	drop
	push_word %i[
	return
$endmap
set_global %imap
return
...
ia
ib
icall
ifor
iwhile
i$
iover-3
inot
iuse
isetglobal
iimport
ilist
ifalse
ionce
iwrite
iopen
ieva
itype
iblob
iclose
iwrite-fragment
isplit
ijoin
ireplace
i(sort)
isort
isort-by
ikey
icopy
i--
ilen
inum
sssorting keys must return numbers for now
itype-error
iRaise
ipass
imake-blob
ispace
inewline
istdout
iecho
ito-str
iutf-8
iencode
iprint\
iprint\(
iprint(
iprint
i)
iquoted
i.\(
i.\
i.(
i.
imap
i]
i[
iin
